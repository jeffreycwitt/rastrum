#!/usr/bin/env ruby
require "bundler/setup"
require "rastrum"
require 'open-uri'
require "thor"

def interactive(message)
	if options[:i] 
		puts "#{message} (Y/N)"
		answer = STDIN.gets.chomp
	else 
		answer = "Y"
	end
	return answer
end
$filename_skip_array = ['.', 
	'..', 
	'.git', 
	"readme.md", 
	"Rastrumfile", 
	"transcriptions.xml", 
	"processed"]

module RastrumCLI
	class Release < Thor
		option :i, :type => :boolean
		desc "status", "perform release procedure for specified generic status"
		long_desc <<-LONGDESC
      "rastrum release <status>"" performs a generic release for the contents of this directory. The procedure will run through every
      tei document within the directory, change the edition number to the next edition number specified in the version.xml file. At the same time it will log a new entry into the revision description, and record the most current of the status as "<status>."

      After completing the xml file updates, the procedure will commit the repository and tag it (e.g. v0.2.0).

      It will end by pushing the repository to the development respository, specified as git remote origin.

      -i, with -i opition, this procedure will be interactive, prompting the user for confirmation before each change to each file within the directory.
		LONGDESC
		def status(status="draft")
			## Make changes to file
			if Rastrum::Tool.check_version == false
				puts "You've already used this version number, please update the transcriptions file"
			else
				ed_no = Rastrum::Tool.next_version

				#updates version log
				answer = interactive("do you want to proceed with version log entry?")
				unless (options[:i] && answer == "N")	
					puts "Provide version description?"
	      	desc = STDIN.gets.chomp
					Rastrum::Tool.versionlog_update(desc, ed_no)
				else
					puts "skipping version log entry"
				end
				
				#perform update in tei header of all xml files
				#updates version log
				answer = interactive("do you want update version numbers and status in tei files, and then create processed html and latex files?")
				unless (options[:i] && answer == "N")	
					Dir.foreach('.') do |filename|
        		# skip ., .., .git, etc.
        		next if $filename_skip_array.include? filename
        		# do work on real items
        		newanswer = interactive("do you want to run full update on #{filename}?")
        		unless (options[:i] && newanswer == "N")
        			Rastrum::Tool.file_update(filename, status, ed_no)
        		end
        	end
				else
					puts "skipping version number and status update in tei files"
				end

				#full git update
				answer = interactive("do you want git commit and push?")
				unless (options[:i] && answer == "N")	
					Rastrum::Repo.full_update(ed_no)
				else
					puts "skipping git commit, tag, and push"
				end
				
				#reset version in tei header to x.x.x-dev 
				answer = interactive("do you want reset the version numbers to x.x.x-dev?")
				unless (options[:i] && answer == "N")	
					Dir.foreach('.') do |filename|
        		# skip ., .., .git, etc.
        		next if $filename_skip_array.include? filename
        		# do work on real items
        		newanswer = interactive("do you want to add '-dev' suffix on ed numbers in #{filename}?")
        		unless (options[:i] && newanswer == "N")
        			Rastrum::Tool.file_update_dev(filename, ed_no + "-dev")
        		end
        	end
				else
					puts "skipping version reset to x.x.x-dev"
				end
				
				#commit changes, without tag
				answer = interactive("do you want to do a final git commit after setting version to x.x.x-dev?")
				unless (options[:i] && answer == "N")	
					Rastrum::Repo.light_update(ed_no + "-dev")
				else
					puts "skipping version reset to x.x.x-dev"
				end
			end
		end
		option :i, :type => :boolean
		desc "draft", "perform release procedure for draft status"
		long_desc <<-LONGDESC
      "rastrum release draft" performs a draft release for the contents of this directory. The procedure will run through every tei document within the directory, change the edition number to the next edition number specified in the version.xml file. At the same time it will log a new entry into the revision description, and record the most current of the status as "draft." 

      After completing the xml file updates, the procedure will commit the repository and tag it (e.g. v0.2.0).

      It will end by pushing the repository to both to the development respository, specified as git remote origin.

      -i, with -i option, this procedure will be interactive, prompting the user for confirmation before each change to each file within the directory.
		LONGDESC
		def draft
			if Rastrum::Tool.check_version == false
				puts "You've already used this version number, please update the transcriptions file"
			else
				self.status("draft")
				puts "any draft specific procedures would go here "
			end
		end
		option :i, :type => :boolean
		desc "review", "perform release procedure"
		long_desc <<-LONGDESC
    "rastrum release reiew" performs a review release for the contents of this directory. The procedure will run through every tei document within the directory, change the edition number to the next edition number specified in the version.xml file. At the same time it will log a new entry into the revision description, and record the most current of the status as "review-version." 

    After completing the xml file updates, the procedure will commit the repository and tag it (e.g. v0.2.0).

    It will end by pushing the repository to both to the development respository, specified as git remote origin, and the review repository specified as git remote dll

    -i, with -i option, this procedure will be interactive, prompting the user for confirmation before each change to each file within the directory.
		LONGDESC
		def review
			if Rastrum::Tool.check_version == false
				puts "You've already used this version number, please update the transcriptions file"
			else
				self.status("review")
				puts "--after this update a push to dll should occur."
			end
		end
		option :i, :type => :boolean
		desc "published", "performs published procedure"
		long_desc <<-LONGDESC
      "rastrum release published" performs a published release for the contents of this directory. The procedure will run through every tei document within the directory, change the edition number to the next edition number specified in the version.xml file. At the same time it will log a new entry into the revision description, and record the most current of the status as "published."

      After completing the xml file updates, the procedure will commit the repository and tag it (e.g. v1.0.0).

      If the current respository only has a master branch, it will create a new branch called "develop" and checkout to this branch where all subsequent development should be done. 

      If release published is called when already on a development branch, the release published command will merge the development branch into the master branch, and the checkout back out to the development branch, changing the status of the devleopment texts back to "draft" and the edition number to x.x.x-dev.

      It will end by pushing the repository to both to the development respository, specified as git remote origin, and the review repository specified as git remote dll

      -i, with -i opition, this procedure will be interactive, prompting the user for confirmation before each change to each file within the directory.

      LONGDESC
		def published
			if Rastrum::Tool.check_version == false
				puts "You've already used this version number, please update the transcriptions file"
			else
				self.status("published")
				puts "--after this update a push to dll should occur and develop branch should be created"
			end
		end
	end
	class Hotfix < Thor
		desc "new", "creates new hotfix"
		def new
		puts "creates new hotfix"
		end
		desc "release", "releases hotfix"
		def release
		puts "releases hotfix"
		end
	end
	class Create < Thor
		option :dup
		desc "diplomatic", "create new diplomatic file"
		long_desc <<-LONGDESC
			"rastrum create diplomatic <prefix>" creates a new file from the prefix and repo name

			--dup, the duplicate command allows the user to create a new transcription file from a copy of an existing transcription, usually an existing transcription of another witness, while changing the file name relevant fields in the teiHeader
		LONGDESC
		def diplomatic(prefix)
			puts "creates a new file for diplomatic transcription"
			if options[:dup]
				download = open(options[:dup])
			else
				download = open("https://bitbucket.org/lombardpress/lombardpress-templates/raw/master/template-diplomatic.xml")
			end
			IO.copy_stream(download, prefix + "_" + Rastrum::Tool.dirname + ".xml")
			doc = Rastrum::Document.new(prefix + "_" + Rastrum::Tool.dirname + ".xml")
			doc.set_date
			doc.set_date_orig
			doc.save(Rastrum::Tool.dirname + ".xml")
		end
		option :dup
		desc "critical", "create new critical file"
		long_desc <<-LONGDESC
			"rastrum create diplomatic " creates a new file from the prefix and repo name

			--dup, the duplicate command allows the user to create a new transcription file from a copy of an existing transcription, usually an existing transcription of another witness, while changing the file name relevant fields in the teiHeader
		LONGDESC
		def critical
			puts "creates a new critical file from template"
			if options[:dup]
				download = open(options[:dup])
			else
				download = open("https://bitbucket.org/lombardpress/lombardpress-templates/raw/master/template-critical.xml")
			end
			IO.copy_stream(download, Rastrum::Tool.dirname + ".xml")
			doc = Rastrum::Document.new(Rastrum::Tool.dirname + ".xml")
			doc.set_date
			doc.set_date_orig
			doc.save(Rastrum::Tool.dirname + ".xml")
		end
		
	end

	class Core < Thor
		
		desc "version", "ask for rastrum version"
		def version
		puts Rastrum::VERSION
		end
		desc "new", "create new repository"
		long_desc <<-LONGDESC
			"rastrum new <reponame>" creates a new repository with dummy tei files, specified in the configuration options. Additionally, the new command will create dummy readme file, a Rastrumfile for further customaization, a version.xml file. 

			Finally it initate a git repository and commit a "first commit"
		LONGDESC
		def new(name)
			puts "create new respository called #{name} with starter files"
		end
		
		desc "update", "perform update procedure"
		def update
			puts "creates processed files, commits, and pushes"
		end
		desc "release", "controls release, with version and status updates"
		subcommand "release", Release

		desc "hotfix", "manages hotfix creation and merge"
		subcommand "hotfix", Hotfix

		desc "create", "controls create commands"
		subcommand "create", Create
	end

	
end

RastrumCLI::Core.start(ARGV)